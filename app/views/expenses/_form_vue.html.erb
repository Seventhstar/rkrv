<script>
  Vue.component('v-select', VueSelect.VueSelect)
  Vue.component('datepicker', vuejsDatepicker )

  let app = new Vue({
    el: '.vue_app',
    mixins: [m_created],
    data: <%= fill_vue_data(@expense, {
      model: 'expense',
      noteValid: '',
      amount: @expense.amount,
      formValid: false,
      confirmModal: false,
      departmentReadOnly: false,
      filteredProjects: [],
      readyToChange: false,
      required_list: "safe organisation expense_type department user amount",
      confirmText: 'Изменить организацию на',
      texts: 'comment date new_comment new_amount user_safe',
      list_values: 'safe organisation expense_type department user staff',
      lists: "safes all_safes:@safes organisations expense_types departments+organisation_id users staffs",
      owned_safes: @owned_safes,
      salary_rows: @salary_rows 

    }) %>,
    
    updated() {
      this.onInput()
    },

    mounted() {
      this.$root.$on('modalYes', this.onYes)
      this.$root.$on('onInput', this.onInput)
      this.$root.$on('modalCancel', this.onCancel)
      setTimeout(() => {
        this.filterSafes(false)
        this.readyToChange = true
      }, 50)
    },

    methods: {
      filterSafes(safe_type_id, by_user_safe = false) {
        let currentSafes = []
        if (this.owned_safes != undefined && this.owned_safes.length) 
          currentSafes = this.all_safes.filter(s => this.owned_safes.includes(s.value))

        // if (currentSafes.length == 0) currentSafes = this.all_safes.filter(s => s.value == user_safe)
        if (currentSafes.length > 0){
          this.safes.length = 0
          for (var s in currentSafes) this.safes.push(currentSafes[s])
        }
      },

      row_field(index, field) {
        return "expense[expense_salary_rows_attributes]["+index+"]["+field+']'
      },

      add_row() {
        if (this.staff !== null) {
          this.salary_rows.push({staff: this.staff, amount: this.new_amount,
                                  comment: this.new_comment, _destroy: false})
          this.staff = null
          this.new_amount = 0
          this.new_comment = "" 
          this.onInput()
          this.calcTotal()
        }
      },

      calcTotal() {
        let amount = 0
        this.salary_rows.filter(sh => !sh._destroy).reduce((amount, c) => sum + c.amount, 0)
        this.amount = amount
      },

      del_row(index) {
        this.salary_rows[index]['_destroy'] = true
        this.calcTotal()
      },

      onCancel() {
        this.confirmModal = false
      },

      onYes() {
        this.organisation = this.department.organisation_id
        this.confirmModal = false
      },

      onInput(e) {
        this.checkValid()
        if (e == undefined) return
        if (e.name == 'department' && this.readyToChange 
              && this.department.organisation_id != this.organisation.value) {
          let o = this.organisations.filter( f => f.value == this.department.organisation_id)
          if (o.length > 0 && o[0] != undefined) {
            this.organisation = this.department.organisation_id
          }
        } else if (e.name == 'expense_type') {
          this.departmentReadOnly = false
          if (this.expense_type == undefined) return
          switch (this.expense_type.value) {
            case 8: // 12 Прочие расходы УПР
            case 2: // 05 Транспортные расходы УПР
            case 1: // 04 Нужды УПР
              this.department = 41 // только отдел продаж
              this.departmentReadOnly = true
          }
        }
      }
    }
  })
</script>
