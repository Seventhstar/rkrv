<script>
  Vue.component('v-select', VueSelect.VueSelect)
  Vue.component('datepicker', vuejsDatepicker )

  let app = new Vue({
    el: '.vue_app',
    data: <%= fill_vue_data(@money_transfer, {
      model: 'money_transfer',
      froms: [],
      tos: [],
      noteValid: '',
      currentUser: [],
      safe_links: @safe_links,
      SafeLinks: [],
      safeToReadOnly: false,
      safeFromReadOnly: false,
      formValid: false,
      filteredProjects: [],
      texts: 'comment doc_date user_safe is_admin',
      list_values: 'safe_from o_from o_to safe_to money_transfer_type user',
      lists: "safe_froms+organisation_id o_froms:@organisations \
              safes+safe_type_id,organisation_id \
              o_tos:@organisations \
              safe_tos+organisation_id money_transfer_types users+safe"
    })
    %>,
    
    updated(){
      this.onInput();
    },

    mounted(){
      this.$root.$on('onInput', this.onInput)
    },

    created(){
      this.currentUser = this.users.find(s => s.value == this.user.value)
      this.SafeLinks = _.groupBy(this.safe_links, 'to_id') 

      setTimeout(() => {
        this.filterAllSafes(false)
        this.readyToChange = true
      }, 100)
    },

    methods: {
      filterSafes(safe_type_id, by_user_safe = false) {
        if (by_user_safe) {
          return this.safes.filter(s => s.safe_type_id == safe_type_id || s.value == this.currentUser.safe)}
        return this.safes.filter(s => s.safe_type_id == safe_type_id)
      },

      filterFroms(safe_type_id, by_user_safe = false) {
        if (safe_type_id >= 0) this.froms.length = 0
        froms = safe_type_id == 0 ? this.safes : this.filterSafes(safe_type_id, by_user_safe)
        for (var s in froms) this.froms.push(froms[s])
        if (by_user_safe && safe_type_id >= 0)
          this.safe_from = this.safe_froms.find(s => s.value == this.currentUser.safe)
      },

      filterTos(safe_type_id) {
        this.tos.length = 0
        tos = safe_type_id == 0 ? this.safes : this.filterSafes(safe_type_id)
        for (var s in tos) this.tos.push(tos[s])
      },

      safeFromIsOnlyUserSafe() {
        this.filterFroms(-1, true)
        this.safeFromReadOnly = true
        this.safe_from = this.user_safe
      },

      filterAllSafes(clear = true) {
        let type = app.money_transfer_type.value
        if (type == undefined) return

        this.safeToReadOnly = false
        this.safeFromReadOnly = false
        switch (type) {
          case 1:
            if (this.is_admin) this.filterFroms(2)
            else this.safeFromIsOnlyUserSafe()

            this.filterTos(4)
            this.safe_to = 97 // Главный сейф
            this.safeToReadOnly = true
            break;
          case 2:
            if (this.is_admin) this.filterFroms(2)
            else this.safeFromIsOnlyUserSafe()

            this.filterTos(3)
            this.safe_to = 154 // Расч. счет
            this.safeToReadOnly = true
            break;
          case 3:
            if (this.readyToChange) this.safe_from = undefined
            // if (!this.is_admin) this.filterFroms(1)  
            this.filterTos(2)
            this.safe_to = this.user_safe
            break;
          case 4:
            this.filterFroms(4)
            this.safe_from = 97 // Главный сейф
            this.safeFromReadOnly = true

            this.filterTos(1, true)
            this.safe_to = this.user_safe 
          case 5:
            this.filterTos(2)
            this.safe_to = this.user_safe
            break;
          case 6:
            this.filterFroms(4)
            this.safeFromReadOnly = true
            this.safe_from = 116 // малый сейф
            break;

          default:
            this.filterFroms(0)
            this.filterTos(0)
        }
      },

      fillToSafesFromLinks(from_id) {
        let links = this.SafeLinks[from_id]
        this.froms.length = 0
        if (links != undefined && links.length > 0) {
          for (sl in links) {
            let sfs = this.safes.filter((s) => s.value == links[sl].from_id)
            for (s in sfs) {this.froms.push(sfs[s])}
          }
        }
        if (this.froms.length == 0) this.filterFroms(1, true)
      },

      onInput(e) {
        // console.log('onInput(e)', e.name, this.money_transfer_type)
        if (e == undefined) return
        if (e.name == 'money_transfer_type' || e.name == 'user') {
          this.filterAllSafes()
        } else if (e.name == 'safe_from' && this.safe_from != undefined 
                          && this.readyToChange) {
          this.o_from = this.safe_from.organisation_id
          this.o_to = this.safe_from.organisation_id
        } else if (e.name == 'safe_to' && this.money_transfer_type != undefined 
                    && this.money_transfer_type.value == 3) {
            if (this.is_admin) this.filterFroms(1)
            else this.fillToSafesFromLinks(this.safe_to.value)
          
        }


      }
    }
    
  });

</script>
